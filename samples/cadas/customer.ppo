#line 48 "c:\fwh\include\FiveWin.ch"
      static bError
#line 221 "hbclass.ch"
DECLARE HBClass  New( cName AS STRING, OPTIONAL SuperParams ) AS CLASS HBClass  Create() AS OBJECT  Instance() AS OBJECT  AddClsMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC, n2 AS NUMERIC, n3 AS NUMERIC )  AddMultiClsData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING )  AddMultiData( cType AS STRING, uVal, nScope AS NUMERIC, aDatas AS ARRAY OF STRING, x AS LOGICAL, lPer AS LOGICAL )  AddMethod( cName AS STRING, @MethodName(), nScope AS NUMERIC )  AddInLine( cName AS STRING, bBlock AS CODEBLOCK, nScope AS NUMERIC )  AddVirtual( cName AS STRING )
#line 93 "c:\fwh\include\FiveWin.ch"
         EXTERNAL FW_GT











extern errorsys
#line 61 ".\..\..\include\SQLLIB.ch"
EXTERNAL SQLLIB
#line 7 "customer.prg"
EXTERNAL SQLLIB
EXTERNAL PGSQL
EXTERNAL DBFCDX
EXTERNAL HB_LANG_PT

static oWnd, oClients, oClient, oName, oAddress, oState, oSalary
static cName, oBrw, cAddress, cState, nSalary
static oBtnUp, oBtnDn, oBtnEd, oBtnCa, oBtnRe, oBtnNe, oBtnDe



function Main()

   local oBar, aFiles, lRet, nServer, nDb

   HB_LANGSELECT( "PT" )

   Set( 4, if(__SetCentury(), "dd/mm/yyyy", "dd/mm/yy") )
   Set( 11, "ON" )
   __SetCentury( "ON" )

   Set( 45, "OFF" )
   Set( 46, 1 )






   SL_CONNPARAMS( "localhost", "postgres", "postgres", "PGSQL" )

   if !SL_DATABASE( "demosqllib" )
      lRet := SL_CREATEDB(,, "demosqllib",,,,, .T. )
      IF !lRet
         msgstop( "Não foi possível criar a tabela <demosqllib>" )
         __Quit()
      End
   endif



   nConn := SL_CONN(,, "demosqllib",,,,, "public", )

   IF nConn = 0
      msgerror( "Falha na conexao:;;" + SQLERR_MSG() )
      __Quit()
   End

   if !SL_FILE( "customer" )
      aFiles := { "Customer.dbf", "sales.dbf" }
      lRet := SL_IMPORT_FILES( aFiles, "DBFCDX", .T., .F.,,, )
   else
      lRet := .T.
   endif

   dbUseArea( .F., "SQLLIB", "Customer", "customer", if( .F. .OR. .T., !.T., NIL ), .F. )


   dbCreateIndex( "_TMP", "FIRST", {|| FIRST}, if( .F., .T., NIL ) )


   dbUseArea( .T., "SQLLIB", "sales", "sales", if( .F. .OR. .T., !.T., NIL ), .F. )

   dbSelectArea( "customer" )

   SQL_DEBUGINIT( .T. )
   customer->( WBrowse() )
   SQL_DEBUGINIT( .F. )



   oWnd := TMdiFrame():New(,,,, "Reporting tools",, BuildMenu(),,, "N/W",,,,,,, )

   oBar := TBar():New( oWnd, 60, 60, .F.,,, .T. )


   TBtnBmp():NewBar(,, "\fwh\bitmaps\attach.bmp",,, {|This|MsgInfo( "Click" )}, .F., oBar, .F.,,, .F.,, 'MsgInfo( "Click" )',, "Attach",,,,,,,,, .F. )


   TBtnBmp():NewBar(,, "\fwh\bitmaps\calendar.bmp",,, {|This|MsgInfo( "Click" )}, .F., oBar, .F.,,, .F.,, 'MsgInfo( "Click" )',, "Calendar",,,,,,,,, .F. )


   TBtnBmp():NewBar(,, "\fwh\bitmaps\people2.bmp",,, {|This|MsgInfo( "Click" )}, .F., oBar, .F.,,, .F.,, 'MsgInfo( "Click" )',, "Clients",,,,,,,,, .F. )

   TBtnBmp():NewBar(,,,,, {|This|MsgInfo( "Click" )}, .F., oBar, .F.,,, .F.,, 'MsgInfo( "Click" )',,,,,,,,,,, .F. )

   oWnd:oMsgBar := TMsgBar():New( oWnd, "Testing the FiveWin Report Class", .T., .F., .F., .F.,,,,, )


   oWnd:Activate(, oWnd:bLClicked, oWnd:bRClicked, oWnd:bMoved, oWnd:bResized, oWnd:bPainted, oWnd:bKeyDown, oWnd:bInit,,,,,,,,, {|| MsgYesNo( "Do you want to end?" )},, oWnd:bLButtonUp )

   dbcloseall()

   SL_DISCONN( nServer )

return nil



function BuildMenu()

   local oMenu

   oMenu := MenuBegin( .F.,,, .F. )
      MenuAddItem( "&DataBases",, .F.,,,,,,,,, .F.,,, .F. )
      MenuBegin( .F.,,, .F. )

         MenuAddItem( "&Clients...", "Clients management", .F.,, {|oMenuItem|BrwClients()},,,,,,, .F.,,, .F. )


         MenuAddItem( "&End", "End this test", .F.,, {|oMenuItem|oWnd:End()},,,,,,, .F.,,, .F. )

      MenuEnd()

      oMenu:AddMdi()

   MenuEnd()

return oMenu



function BrwClients()

   local oIco, oBar

   if oClients <> nil
      return nil
   endif

   oIco := TIcon():New( ,,, "\fwh\icons\customer.ico", )

   oClients := TMdiChild():New(,,,, "Clients management",,,, oIco, .F.,,,,, .F., .F.,,, !.F., !.F., !.F., !.F., )

   oBar := TBar():New( oClients,,, .F.,,, .F. )

   TBtnBmp():NewBar(,,,,, {|This|ShowClient()}, .F., oBar, .F.,,, .F.,, "ShowClient()",,,,,,,,,,, .F. )






























   oBrw := TWBrowse():New( 2, 0, 500, 500,,,, oClients,,,, {|| ChangeClient()},,,,,,,, .F.,, .F.,, .F.,,, )

   oClients:SetControl( oBrw )

   dbgotop()

   oClients:Activate(, oClients:bLClicked, oClients:bRClicked, oClients:bMoved, oClients:bResized, oClients:bPainted, oClients:bKeyDown, oClients:bInit,,,,,,,,, {||( oClients := nil, .T. )},, oClients:bLButtonUp )

return nil



function ShowClient()

   local oIco

   nSalary := 0

   if oClient <> nil
      return nil
   endif

   oIco := TIcon():New( ,,, "\fwh\icons\Person.ico", )


   oClient = TDialog():New(,,,,, "CLIENT",, .F.,,,,,, .F., oIco,,,,, .F. )

   TSay():ReDefine( 3,, oClient,,,, .F.,, .F., .F. )
   TSay():ReDefine( 4,, oClient,,,, .F.,, .F., .F. )
   TSay():ReDefine( 5,, oClient,,,, .F.,, .F., .F. )
   TSay():ReDefine( 6,, oClient,,,, .F.,, .F., .F. )

   oName := TGet():ReDefine( 230, { | u | If( PCount()==0, cName, cName:= u ) }, oClient,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cName", )
   oAddress := TGet():ReDefine( 250, { | u | If( PCount()==0, cAddress, cAddress:= u ) }, oClient,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cAddress", )
   oState := TGet():ReDefine( 150, { | u | If( PCount()==0, cState, cState:= u ) }, oClient,,,,,,,,, .F.,,, .F., .F.,,,,,,, "cState", )
   oSalary := TGet():ReDefine( 200, { | u | If( PCount()==0, nSalary, nSalary:= u ) }, oClient,, "@E 999999.99",,,,,,, .F.,,, .F., .F.,,,,,,, "nSalary", )

   oBtnUp := TButton():ReDefine( 260, {||GoReg( "UP" )}, oClient,,, .F.,,,, .F. )

   oBtnDn := TButton():ReDefine( 220, {||GoReg( "DOWN" )}, oClient,,, .F.,,,, .F. )

   oBtnEd := TButton():ReDefine( 290, {||EDIT()}, oClient,,, .F.,,,, .F. )

   oBtnCa := TButton():ReDefine( 310, {||CANCEL()}, oClient,,, .F.,,,, .F. )

   oBtnRe := TButton():ReDefine( 270, {||RECORD()}, oClient,,, .F.,,,, .F. )

   oBtnNe := TButton():ReDefine( 280, {||NEWREG()}, oClient,,, .F.,,,, .F. )

   oBtnDe := TButton():ReDefine( 300, {||DELREG()}, oClient,,, .F.,,,, .F. )

   dbSelectArea( "Sales" )

   TWBrowse():ReDefine( 240,, oClient,,,,,,,,,,,,,, .F.,,,,, )

   CANCEL()


   oClient:Activate( oClient:bLClicked, oClient:bMoved, oClient:bPainted, .T., {|Self|( oClient := nil, .T. )}, ! .T.,, oClient:bRClicked,, )

   dbSelectArea( "customer" )

   ChangeClient()

return nil



function NEWREG

   customer->( dbappend() )
   customer->( dbcommit() )

   oBrw:GoBottom()

   oBrw:refresh()

return nil



function DELREG

   msgrun( "", , { || .T. } )

   SQL_DEBUGINIT( .T. )
   customer->( dbdelete() )
   SQL_DEBUGINIT( .F. )

   customer->( dbcommit() )

   oBrw:refresh()

return nil



function EDIT

   oName:enable()
   oAddress:enable()
   oState:enable()
   oSalary:enable()

   oBtnUp:disable()
   oBtnDn:disable()
   oBtnEd:disable()
   oBtnNe:disable()
   oBtnDe:disable()
   oBtnRe:enable()
   oBtnCa:enable()

   oName:setfocus()

return nil



function CANCEL

   oName:disable()
   oAddress:disable()
   oState:disable()
   oSalary:disable()
   oBtnUp:enable()
   oBtnDn:enable()
   oBtnEd:enable()
   oBtnCa:disable()
   oBtnRe:disable()
   oBtnNe:enable()
   oBtnDe:enable()

return nil



function RECORD

   customer->First  := cName
   customer->Street := cAddress
   customer->State  := cState
   customer->salary := nSalary

   oBrw:DrawSelect()

   CANCEL()

return nil



function ChangeClient()

   if oClient <> nil
      cName := customer->First
      oName:Refresh()
      cAddress := customer->Street
      oAddress:Refresh()
      cState := customer->State
      oState:Refresh()
      oSalary:varput( customer->salary )
      oSalary:Refresh()
   endif

return nil



function GoReg( cTipo )

   msgrun( "", , { || .T. } )

   if oClients <> nil
      if cTipo == "UP"
         oClients:oControl:GoUp()
      else
         oClients:oControl:GoDown()
      endif
   else
      if cTipo == "UP"
         dbSkip( -1 )
         if boF()
            dbGoTop()
         endif
      else
         dbSkip( 1 )
         if EoF()
            dbGoBottom()
         endif
      endif
   endif

   ChangeClient()

return nil
